#!/usr/bin/env ruby

require 'optparse'
require 'yaml'
require 'apipie-bindings'
require 'ruby-progressbar'
require 'mail'


@defaults = {
    :uri            => 'https://localhost/',
    :timeout        => 300,
    :user           => 'admin',
    :pass           => 'changeme',
    :org            => 1,
    :email          => 'root@localhost',
    :lockfile       => '/tmp/katello-productsync.lock'
}

@options = {
    :yamlfile  => 'productsync.yaml',
}

optparse = OptionParser.new do |opts|
    opts.banner = "Usage: #{opts.program_name} ACTION [options]"
    opts.version = "0.1"

    opts.separator ""
    opts.separator "#{opts.summary_indent}ACTION can be any of [sync,list,listasyaml]"
    opts.separator "#{opts.summary_indent}It is HIGHLY recommended to run this via screen due to possible running time length"
    opts.separator ""

    opts.on("-U", "--uri=URI", "URI to the Katello") do |u|
        @options[:uri] = u
    end
    opts.on("-t", "--timeout=TIMEOUT", "Timeout value in seconds for any API calls. -1 means never timeout") do |t|
        @options[:timeout] = t
    end
    opts.on("-u", "--user=USER", "User to log in to Katello") do |u|
        @options[:user] = u
    end
    opts.on("-p", "--pass=PASS", "Password to log in to Katello") do |p|
        @options[:pass] = p
    end
    opts.on("-o", "--organization-id=ID", "ID of the Organization to clean up") do |o|
        @options[:org] = o
    end
    opts.on("-c", "--config=FILE", "configuration in YAML format") do |c|
        @options[:yamlfile] = c
    end
    opts.on("-l", "--lockfile=FILE", "Lockfile to use during sync process") do |c|
        @options[:lockfile] = c
    end
    opts.on("-e", "--email=emailaddress", "send email to this address on failures") do |e|
        @options[:email] = e
    end
end
optparse.parse!

if ARGV.empty?
    puts optparse.help
    exit
end

@yaml = YAML.load_file(@options[:yamlfile])

if @yaml.has_key?(:settings) and @yaml[:settings].is_a?(Hash)
    @yaml[:settings].each do |key,val|
        if not @options.has_key?(key)
            @options[key] = val
        end
    end
end

@defaults.each do |key,val|
    if not @options.has_key?(key)
        @options[key] = val
    end
end

unless @yaml[:products].is_a?(Array)
    puts "Your products yaml is not properly formatted to be consumed as an array. Exiting..."
    exit
end

# The lockfile is only currently used for the sync process, none of the other functions are dangerous enough to require a lock
# The lockfile is configurable, incase you know what you're doing, and do want to kick off multiple productsync syncs at the same time
def check_lock()
    lockfile = @options[:lockfile]
    unless File.exists?(lockfile)
        File.write(lockfile,"")
#        `touch #{lockfile}`
    end

    unless File.new(lockfile).flock( File::LOCK_NB | File::LOCK_EX )
        puts "#{lockfile} already locked, which indicates a bad exit from a prior run, or another copy is already running"
        exit
    end
end

#This returns the apipie connection object.  It's used by most functions, so it gets it's own so fixes/changes can happen in one place
def build_connection()
    return ApipieBindings::API.new({:uri => @options[:uri], :username => @options[:user], :password => @options[:pass], :api_version => '2', :timeout => @options[:timeout]})
end

#All the functions use this to get the product hash object.
#Takes the apipie connection object as a parameter
def get_products(apiconn)
    products = []
    req = apiconn.resource(:products).call(:index, {:organization_id => @options[:org], :full_results => true})
    products.concat(req['results'])
    while (req['results'].length == req['per_page'].to_i)
        req = apiconn.resource(:products).call(:index, {:organization_id => @options[:org], :full_results => true, :per_page => req['per_page'], :page => req['page'].to_i+1})
        products.concat(req['results'])
    end
    return products
end

#List all of the products in friendly name format
def list()
    apiconn = build_connection
    products = get_products(apiconn)
    products.each do |product|
        puts product['name']
    end
end

#Lists all of the products in the YAML format needed for the config file
#This makes it easy to echo into your yaml file and edit what you want to sync
def list_as_yaml()
    apiconn = build_connection
    products = get_products(apiconn)
    products_array = Array.new
    products.each do |product|
        products_array.push(product['name']) 
    end
    puts YAML.load("
        :products:
            #{products_array}
    ").to_yaml(line_width: -1)
end

#We send out emails from a few different places, so put this into it's own function
def send_email(subject,email_body)
    myhn = `hostname`.strip
    sendto =  @options[:email]
    mail = Mail.new do
        from    "katello-productsync@#{myhn}"
        to      "#{sendto}"
        subject "#{subject}"
        content_type 'text/html; charset=UTF-8'
        body    "#{email_body}"
    end
    mail.deliver!
end

#The main brains of this tool.  This is what does the actual product syncing
def sync()
    check_lock
    email_body = ""
    error_counter = 0
    apiconn = build_connection
    products = get_products(apiconn)

    #Got our product list, lets start doing some work
    products.each do |product|
        #We only care about products called out in the config yaml
        if @yaml[:products].is_a?(Array) and @yaml[:products].include?(product['name'])
            productdetails = apiconn.resource(:products).call(:show, {:organization_id => @options[:org], :full_results => true, :id => product['id']})
            #Check and make sure the product isn't already syncing, and is in a good stopped state
            unless productdetails['sync_status']['raw_state'] == 'stopped'
                email_body= "#{email_body}Product #{product['name']} is not in a stopped state. Current state: #{productdetails['sync_status']['raw_state']}</br></br>"
                puts "Product #{product['name']} is not in a stopped state. Current state: #{productdetails['sync_status']['raw_state']}"
                error_counter += 1
                next
            end
            puts "Syncing #{product['name']}"
            email_body = "#{email_body}Syncing #{product['name']}</br>"
            #The sync process has the ability to error, so we're putting it inside a rescue block
            begin
                synctask = apiconn.resource(:products).call(:sync, {:organization_id => @options[:org], :id => product['id']})
                running = true
                pbar = ProgressBar.create(:format => "   %a < Task ID #{synctask['id']} >")
                timercount = 0
                #We've started the sync, now to let it do it's work while we wait...
                #Yes, the below isn't perfectly accurate to the seconds. We sleep 30 seconds (accurate-ish), then do the API call which may take a few seconds.
                #This leads to the timer count not being perfect. But for it's intended purpose, it's good enough
                while running
                    #Basically, sleep 30 seconds, as we only want to check status every 30 to prevent excessive API calls
                    30.times {
                        sleep 1
                        pbar.refresh
                        timercount += 1
                    }
                    #Get the current status of the sync task
                    currentstatus = apiconn.resource(:foreman_tasks).call(:show, {:organization_id => @options[:org], :id => synctask['id']})
                    #If the sync is finised, finish the timer and set running to false
                    if currentstatus['state'] == 'stopped'
                        running = false
                        pbar.finish
                    else
                        #If the sync isn't finished, lets see how long it's been running. If it's divisible by 3600 seconds (an hour), send an email to inform the admin
                        #There's nothing wrong with a long running sync, or sometimes there is. This is just a "watchdog" in a sense so the admin doesnt have to keep an eye on it
                        #Ignore the hourly emails of a single sync taking a while if you know it should take a while
                        #Otherwise, the email is an alert to see what's taking so long
                        #Down the road, probably worth making the YAML take a time in seconds per product of a "standard" sync time, and then basing alerts off that
                        if timercount % 3600 == 0
                          send_email("ProductSync long running sync: #{product['name']}", "#{product['name']} has been syncing for #{timercount} seconds")
                        end
                    end
                end
                #Alrighty, we're done running. Now to check the results
                status = currentstatus['result']
                if status.empty?
                    status = "No status available"
                    error_counter += 1
                elsif status != "success"
                    error_counter += 1
                end
                puts "   Syncing of #{product['name']} completed. Result was #{status}"
                #Working on adding url links, but its broken when you use localhost as your URI...
#                email_body = "#{email_body}Syncing of #{product['name']} completed. Result was <a href=\"#{@options[:uri]}/foreman_tasks/tasks/#{synctask['id']}\">#{status}</a></br></br>"
                email_body = "#{email_body}Syncing of #{product['name']} completed. Result was #{status}</br></br>"
            rescue Exception => e
                #Catch ALL exceptions, and log it against the sync task that was errored and add it to the email/output it
                error_counter += 1
                puts "   Sync task #{synctask['id']} threw an exception: #{e.message}\n#{e.backtrace.inspect}"
                email_body ="#{email_body}Sync task #{synctask['id']} threw an exception: #{e.message}</br>#{e.backtrace.inspect}</br></br>"
            end
        end
    end
    #If you didn't do ANY syncs, consider it an error and set the email body to something
    if email_body.empty?
        error_counter += 1
        email_body = "No syncs happened"
    end
    send_email("Sync results: #{error_counter} errors", email_body)
end


action = ARGV.shift

if action == 'sync'
    sync
elsif action == 'list'
    list
elsif action == 'listasyaml'
    list_as_yaml
end
